// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using OrigamiHelper.Data;

#nullable disable

namespace OrigamiHelper.Migrations
{
    [DbContext(typeof(OrigamiHelperDbContext))]
    partial class OrigamiHelperDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "c3aaeb97-d2ba-4a53-a521-4eea61e59b35",
                            Name = "Admin",
                            NormalizedName = "admin"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c14b7564-8bfb-45e9-b72d-ce3b538d0a65",
                            Email = "admina@strator.comx",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEKt/tKnc4oFsUazY+6/BYQ5pmfsHjpAs14WySDl7gmaBqW6Co+hrz4MO0uNJ+OWiGw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d5ef2263-3765-42a1-9dea-fb9bfde70f62",
                            TwoFactorEnabled = false,
                            UserName = "Administrator"
                        },
                        new
                        {
                            Id = "a1b2c3d4-5678-4eab-9fc1-100000000001",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "854bc95d-08c8-4fa7-b0b2-f6ca9730e52c",
                            Email = "fan1@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "FAN1@EXAMPLE.COM",
                            NormalizedUserName = "ORIGAMIFAN1",
                            PasswordHash = "AQAAAAIAAYagAAAAEJ8NmPlgsgwCAfbn1nasOUlowZxTgMMuFxWQnfl8x3tHo8U/7nchuBO0HLeRxmAxbA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a72be208-3f15-42da-8b94-143d2c3a14bc",
                            TwoFactorEnabled = false,
                            UserName = "origamifan1"
                        },
                        new
                        {
                            Id = "a1b2c3d4-5678-4eab-9fc1-100000000002",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "68e6fb0b-a8b8-41b2-99d2-39f745bb44b8",
                            Email = "folder@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "FOLDER@EXAMPLE.COM",
                            NormalizedUserName = "PAPERFOLDER",
                            PasswordHash = "AQAAAAIAAYagAAAAEBA5hNYeyuc/cLVuReXZbMHrvRDr4RC/fFKj3F4hW3Nq2jOXYFeP0Rrns8Xut5B+Qg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "964dd949-56ee-42d4-a518-ad4851ddea16",
                            TwoFactorEnabled = false,
                            UserName = "paperfolder"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            RoleId = "c3aaeb97-d2ba-4a53-a521-4eea61e59b35"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("OrigamiHelper.Models.Complexity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Difficulty")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Complexities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Difficulty = "Simple"
                        },
                        new
                        {
                            Id = 2,
                            Difficulty = "Low Intermediate"
                        },
                        new
                        {
                            Id = 3,
                            Difficulty = "Intermediate"
                        },
                        new
                        {
                            Id = 4,
                            Difficulty = "High Intermediate"
                        },
                        new
                        {
                            Id = 5,
                            Difficulty = "Complex"
                        },
                        new
                        {
                            Id = 6,
                            Difficulty = "Super Complex"
                        });
                });

            modelBuilder.Entity("OrigamiHelper.Models.Model", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Artist")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ComplexityId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModelImg")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SourceId")
                        .HasColumnType("integer");

                    b.Property<int>("StepCount")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserProfileId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ComplexityId");

                    b.HasIndex("SourceId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("Models");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Artist = "Nguyen Hong Chuong",
                            ComplexityId = 4,
                            CreatedAt = new DateTime(2025, 6, 24, 19, 15, 29, 273, DateTimeKind.Utc).AddTicks(2467),
                            ModelImg = "/Images/rat.png",
                            SourceId = 1,
                            StepCount = 20,
                            Title = "Cooking Rat",
                            UserProfileId = 1
                        },
                        new
                        {
                            Id = 2,
                            Artist = "Satoshi Kamiya",
                            ComplexityId = 6,
                            CreatedAt = new DateTime(2025, 6, 24, 19, 15, 29, 273, DateTimeKind.Utc).AddTicks(2475),
                            ModelImg = "/Images/dragon.jpg",
                            SourceId = 2,
                            StepCount = 274,
                            Title = "Ancient Dragon",
                            UserProfileId = 1
                        });
                });

            modelBuilder.Entity("OrigamiHelper.Models.ModelPaper", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ModelId")
                        .HasColumnType("integer");

                    b.Property<int>("PaperId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ModelId");

                    b.HasIndex("PaperId");

                    b.ToTable("ModelPapers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ModelId = 1,
                            PaperId = 1
                        },
                        new
                        {
                            Id = 2,
                            ModelId = 2,
                            PaperId = 3
                        },
                        new
                        {
                            Id = 3,
                            ModelId = 2,
                            PaperId = 2
                        });
                });

            modelBuilder.Entity("OrigamiHelper.Models.Paper", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Papers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Brand = "Kami"
                        },
                        new
                        {
                            Id = 2,
                            Brand = "Washi"
                        },
                        new
                        {
                            Id = 3,
                            Brand = "Foil"
                        });
                });

            modelBuilder.Entity("OrigamiHelper.Models.Request", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ModelId")
                        .HasColumnType("integer");

                    b.Property<int>("StepNumber")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int?>("UserProfileId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ModelId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("Requests");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 6, 21, 19, 15, 29, 273, DateTimeKind.Utc).AddTicks(2545),
                            Description = "Having trouble with the reverse fold. Not sure which layer to use.",
                            ModelId = 1,
                            StepNumber = 5,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 6, 23, 19, 15, 29, 273, DateTimeKind.Utc).AddTicks(2552),
                            Description = "Step 157's sink fold keeps tearing my paper. Is there a trick?",
                            ModelId = 2,
                            StepNumber = 157,
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 6, 24, 19, 15, 29, 273, DateTimeKind.Utc).AddTicks(2552),
                            Description = "I'm not sure if the squash fold should go all the way through.",
                            ModelId = 2,
                            StepNumber = 200,
                            UserId = 1
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 6, 22, 19, 15, 29, 273, DateTimeKind.Utc).AddTicks(2553),
                            Description = "Step 12's squash fold keeps making my model asymmetrical.",
                            ModelId = 1,
                            StepNumber = 12,
                            UserId = 2
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 6, 23, 19, 15, 29, 273, DateTimeKind.Utc).AddTicks(2554),
                            Description = "This collapse is insane! Any tips on pre-creasing?",
                            ModelId = 2,
                            StepNumber = 250,
                            UserId = 3
                        });
                });

            modelBuilder.Entity("OrigamiHelper.Models.Source", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Sources");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Title = "Origami Design Secrets 2E"
                        },
                        new
                        {
                            Id = 2,
                            Title = "Works of Satoshi Kamiya 1995-2003"
                        });
                });

            modelBuilder.Entity("OrigamiHelper.Models.UserProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IdentityUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IdentityUserId");

                    b.ToTable("UserProfiles");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            Address = "22 Fold Street",
                            FirstName = "Olivia",
                            IdentityUserId = "a1b2c3d4-5678-4eab-9fc1-100000000001",
                            LastName = "Cranes"
                        },
                        new
                        {
                            Id = 3,
                            Address = "88 Crease Lane",
                            FirstName = "Max",
                            IdentityUserId = "a1b2c3d4-5678-4eab-9fc1-100000000002",
                            LastName = "Valley"
                        },
                        new
                        {
                            Id = 1,
                            Address = "101 Main Street",
                            FirstName = "Admina",
                            IdentityUserId = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            LastName = "Strator"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OrigamiHelper.Models.Model", b =>
                {
                    b.HasOne("OrigamiHelper.Models.Complexity", "Complexity")
                        .WithMany()
                        .HasForeignKey("ComplexityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OrigamiHelper.Models.Source", "Source")
                        .WithMany()
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OrigamiHelper.Models.UserProfile", "UserProfile")
                        .WithMany()
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Complexity");

                    b.Navigation("Source");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("OrigamiHelper.Models.ModelPaper", b =>
                {
                    b.HasOne("OrigamiHelper.Models.Model", null)
                        .WithMany("ModelPapers")
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OrigamiHelper.Models.Paper", "Paper")
                        .WithMany()
                        .HasForeignKey("PaperId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Paper");
                });

            modelBuilder.Entity("OrigamiHelper.Models.Request", b =>
                {
                    b.HasOne("OrigamiHelper.Models.Model", "Model")
                        .WithMany()
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OrigamiHelper.Models.UserProfile", "UserProfile")
                        .WithMany()
                        .HasForeignKey("UserProfileId");

                    b.Navigation("Model");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("OrigamiHelper.Models.UserProfile", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "IdentityUser")
                        .WithMany()
                        .HasForeignKey("IdentityUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdentityUser");
                });

            modelBuilder.Entity("OrigamiHelper.Models.Model", b =>
                {
                    b.Navigation("ModelPapers");
                });
#pragma warning restore 612, 618
        }
    }
}
