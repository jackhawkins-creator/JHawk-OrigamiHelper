// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using OrigamiHelper.Data;

#nullable disable

namespace OrigamiHelper.Migrations
{
    [DbContext(typeof(OrigamiHelperDbContext))]
    partial class OrigamiHelperDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "c3aaeb97-d2ba-4a53-a521-4eea61e59b35",
                            Name = "Admin",
                            NormalizedName = "admin"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2f9d1752-4f3c-43d7-931a-a1c8636b38e3",
                            Email = "admina@strator.comx",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEL5SkZ8tYWKNPmwc3RSQOaeSaA6e5LGIIVfn6fVnLwPLZIVdDQk5Z5z0idGy32byZQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bffc159d-cfc1-4c31-8882-e7f9f6d63137",
                            TwoFactorEnabled = false,
                            UserName = "Administrator"
                        },
                        new
                        {
                            Id = "a1b2c3d4-5678-4eab-9fc1-100000000001",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "06e597e2-8c7e-4369-a7ce-0b0fee4f718b",
                            Email = "fan1@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "FAN1@EXAMPLE.COM",
                            NormalizedUserName = "ORIGAMIFAN1",
                            PasswordHash = "AQAAAAIAAYagAAAAEGc6nPPm47A8uJ23wFSoJro2zWvyHsKOO9teQ4UiGj16gCBYdS2nC+gp1C+UNozq1Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "786a9a66-4b02-44a3-9475-4930021da442",
                            TwoFactorEnabled = false,
                            UserName = "origamifan1"
                        },
                        new
                        {
                            Id = "a1b2c3d4-5678-4eab-9fc1-100000000002",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6b9ca7c8-96ff-4443-871e-5ce8c896a29d",
                            Email = "folder@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "FOLDER@EXAMPLE.COM",
                            NormalizedUserName = "PAPERFOLDER",
                            PasswordHash = "AQAAAAIAAYagAAAAEEbeJhsE5rFjYv/uCGvTWB+XVhOsJebED5r8Di8G0xiFWNDfOiKvF12d7B4e0oBJdQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "22f2ca9f-0fb0-49fe-9fab-a6e7f8a0ebae",
                            TwoFactorEnabled = false,
                            UserName = "paperfolder"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            RoleId = "c3aaeb97-d2ba-4a53-a521-4eea61e59b35"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("OrigamiHelper.Models.Complexity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Difficulty")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Complexities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Difficulty = "Simple"
                        },
                        new
                        {
                            Id = 2,
                            Difficulty = "Low Intermediate"
                        },
                        new
                        {
                            Id = 3,
                            Difficulty = "Intermediate"
                        },
                        new
                        {
                            Id = 4,
                            Difficulty = "High Intermediate"
                        },
                        new
                        {
                            Id = 5,
                            Difficulty = "Complex"
                        },
                        new
                        {
                            Id = 6,
                            Difficulty = "Super Complex"
                        });
                });

            modelBuilder.Entity("OrigamiHelper.Models.Model", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Artist")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ComplexityId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModelImg")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SourceId")
                        .HasColumnType("integer");

                    b.Property<int>("StepCount")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserProfileId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ComplexityId");

                    b.HasIndex("SourceId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("Models");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Artist = "Nguyen Hong Chuong",
                            ComplexityId = 4,
                            CreatedAt = new DateTime(2025, 6, 30, 20, 6, 47, 572, DateTimeKind.Utc).AddTicks(5006),
                            ModelImg = "/Images/rat.png",
                            SourceId = 1,
                            StepCount = 121,
                            Title = "Cooking Rat",
                            UserProfileId = 1
                        },
                        new
                        {
                            Id = 2,
                            Artist = "Satoshi Kamiya",
                            ComplexityId = 6,
                            CreatedAt = new DateTime(2025, 6, 30, 20, 6, 47, 572, DateTimeKind.Utc).AddTicks(5011),
                            ModelImg = "/Images/dragon.jpg",
                            SourceId = 2,
                            StepCount = 274,
                            Title = "Ancient Dragon",
                            UserProfileId = 1
                        },
                        new
                        {
                            Id = 3,
                            Artist = "Satoshi Kamiya",
                            ComplexityId = 6,
                            CreatedAt = new DateTime(2025, 6, 30, 20, 6, 47, 572, DateTimeKind.Utc).AddTicks(5011),
                            ModelImg = "/Images/splash.jpg",
                            SourceId = 2,
                            StepCount = 49,
                            Title = "Splash",
                            UserProfileId = 1
                        },
                        new
                        {
                            Id = 4,
                            Artist = "Robert Lang",
                            ComplexityId = 2,
                            CreatedAt = new DateTime(2025, 6, 30, 20, 6, 47, 572, DateTimeKind.Utc).AddTicks(5012),
                            ModelImg = "/Images/leaf.jpg",
                            SourceId = 5,
                            StepCount = 32,
                            Title = "Maple Leaf",
                            UserProfileId = 2
                        },
                        new
                        {
                            Id = 5,
                            Artist = "Katsuta Kyohei",
                            ComplexityId = 5,
                            CreatedAt = new DateTime(2025, 6, 30, 20, 6, 47, 572, DateTimeKind.Utc).AddTicks(5013),
                            ModelImg = "/Images/octopus.png",
                            SourceId = 3,
                            StepCount = 125,
                            Title = "Octopus",
                            UserProfileId = 3
                        },
                        new
                        {
                            Id = 6,
                            Artist = "John Montroll",
                            ComplexityId = 4,
                            CreatedAt = new DateTime(2025, 6, 30, 20, 6, 47, 572, DateTimeKind.Utc).AddTicks(5014),
                            ModelImg = "/Images/owl.png",
                            SourceId = 4,
                            StepCount = 84,
                            Title = "Barn Owl",
                            UserProfileId = 2
                        });
                });

            modelBuilder.Entity("OrigamiHelper.Models.ModelPaper", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ModelId")
                        .HasColumnType("integer");

                    b.Property<int>("PaperId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ModelId");

                    b.HasIndex("PaperId");

                    b.ToTable("ModelPapers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ModelId = 1,
                            PaperId = 1
                        },
                        new
                        {
                            Id = 2,
                            ModelId = 2,
                            PaperId = 3
                        },
                        new
                        {
                            Id = 3,
                            ModelId = 2,
                            PaperId = 2
                        },
                        new
                        {
                            Id = 4,
                            ModelId = 4,
                            PaperId = 2
                        },
                        new
                        {
                            Id = 5,
                            ModelId = 5,
                            PaperId = 3
                        },
                        new
                        {
                            Id = 6,
                            ModelId = 6,
                            PaperId = 1
                        });
                });

            modelBuilder.Entity("OrigamiHelper.Models.Paper", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Papers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Brand = "Kami"
                        },
                        new
                        {
                            Id = 2,
                            Brand = "Washi"
                        },
                        new
                        {
                            Id = 3,
                            Brand = "Foil"
                        });
                });

            modelBuilder.Entity("OrigamiHelper.Models.Request", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ModelId")
                        .HasColumnType("integer");

                    b.Property<int>("StepNumber")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int?>("UserProfileId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ModelId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("Requests");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 6, 27, 20, 6, 47, 572, DateTimeKind.Utc).AddTicks(5065),
                            Description = "Having trouble with the reverse fold. Not sure which layer to use.",
                            ModelId = 1,
                            StepNumber = 5,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 6, 29, 20, 6, 47, 572, DateTimeKind.Utc).AddTicks(5071),
                            Description = "Step 157's sink fold keeps tearing my paper. Is there a trick?",
                            ModelId = 2,
                            StepNumber = 157,
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 6, 30, 20, 6, 47, 572, DateTimeKind.Utc).AddTicks(5072),
                            Description = "I'm not sure if the squash fold should go all the way through.",
                            ModelId = 2,
                            StepNumber = 200,
                            UserId = 1
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 6, 28, 20, 6, 47, 572, DateTimeKind.Utc).AddTicks(5073),
                            Description = "Step 12's squash fold keeps making my model asymmetrical.",
                            ModelId = 1,
                            StepNumber = 12,
                            UserId = 2
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 6, 29, 20, 6, 47, 572, DateTimeKind.Utc).AddTicks(5074),
                            Description = "This collapse is insane! Any tips on pre-creasing?",
                            ModelId = 2,
                            StepNumber = 250,
                            UserId = 3
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2025, 6, 26, 20, 6, 47, 572, DateTimeKind.Utc).AddTicks(5074),
                            Description = "How do I sink the sides?",
                            ModelId = 3,
                            StepNumber = 11,
                            UserId = 2
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2025, 6, 27, 20, 6, 47, 572, DateTimeKind.Utc).AddTicks(5183),
                            Description = "Can't figure out how the tentacles splay out. Help?",
                            ModelId = 5,
                            StepNumber = 77,
                            UserId = 3
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2025, 6, 29, 20, 6, 47, 572, DateTimeKind.Utc).AddTicks(5185),
                            Description = "Squash fold here causes paper to rip. Paper too thick?",
                            ModelId = 6,
                            StepNumber = 40,
                            UserId = 3
                        });
                });

            modelBuilder.Entity("OrigamiHelper.Models.Response", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Media")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RequestId")
                        .HasColumnType("integer");

                    b.Property<int>("ResponderId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RequestId");

                    b.ToTable("Responses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 6, 28, 20, 6, 47, 572, DateTimeKind.Utc).AddTicks(5214),
                            Description = "Make sure you use an open sink instead of a closed sink.",
                            Media = "/Videos/splashvidstep11 (aud removed).mov",
                            RequestId = 6,
                            ResponderId = 3
                        });
                });

            modelBuilder.Entity("OrigamiHelper.Models.Source", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Sources");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Title = "Vietnamese Origami Group Vol. 1"
                        },
                        new
                        {
                            Id = 2,
                            Title = "Works of Satoshi Kamiya 1995-2003"
                        },
                        new
                        {
                            Id = 3,
                            Title = "Works of Katsuta Kyohei"
                        },
                        new
                        {
                            Id = 4,
                            Title = "Origami Insects and Their Kin"
                        },
                        new
                        {
                            Id = 5,
                            Title = "Origami Design Secrets"
                        });
                });

            modelBuilder.Entity("OrigamiHelper.Models.UserProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IdentityUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IdentityUserId");

                    b.ToTable("UserProfiles");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            Address = "22 Fold Street",
                            FirstName = "Olivia",
                            IdentityUserId = "a1b2c3d4-5678-4eab-9fc1-100000000001",
                            LastName = "Cranes"
                        },
                        new
                        {
                            Id = 3,
                            Address = "88 Crease Lane",
                            FirstName = "Max",
                            IdentityUserId = "a1b2c3d4-5678-4eab-9fc1-100000000002",
                            LastName = "Valley"
                        },
                        new
                        {
                            Id = 1,
                            Address = "101 Main Street",
                            FirstName = "Admina",
                            IdentityUserId = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            LastName = "Strator"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OrigamiHelper.Models.Model", b =>
                {
                    b.HasOne("OrigamiHelper.Models.Complexity", "Complexity")
                        .WithMany()
                        .HasForeignKey("ComplexityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OrigamiHelper.Models.Source", "Source")
                        .WithMany()
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OrigamiHelper.Models.UserProfile", "UserProfile")
                        .WithMany()
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Complexity");

                    b.Navigation("Source");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("OrigamiHelper.Models.ModelPaper", b =>
                {
                    b.HasOne("OrigamiHelper.Models.Model", null)
                        .WithMany("ModelPapers")
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OrigamiHelper.Models.Paper", "Paper")
                        .WithMany()
                        .HasForeignKey("PaperId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Paper");
                });

            modelBuilder.Entity("OrigamiHelper.Models.Request", b =>
                {
                    b.HasOne("OrigamiHelper.Models.Model", "Model")
                        .WithMany()
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OrigamiHelper.Models.UserProfile", "UserProfile")
                        .WithMany()
                        .HasForeignKey("UserProfileId");

                    b.Navigation("Model");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("OrigamiHelper.Models.Response", b =>
                {
                    b.HasOne("OrigamiHelper.Models.Request", "Request")
                        .WithMany()
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Request");
                });

            modelBuilder.Entity("OrigamiHelper.Models.UserProfile", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "IdentityUser")
                        .WithMany()
                        .HasForeignKey("IdentityUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdentityUser");
                });

            modelBuilder.Entity("OrigamiHelper.Models.Model", b =>
                {
                    b.Navigation("ModelPapers");
                });
#pragma warning restore 612, 618
        }
    }
}
